module Day14 where

import Utils
import qualified Day10
import Data.UnionFind.ST
import qualified Data.Set as Set
import qualified Data.Map as Map

-- start: 6h31
-- end: 6h54
-- end2: 7h13

{-
day 14 was a generated maze

- first star, count the number of walking area in the maze generated by a generating function
- second star, count the number of connected walking areas
-}
fileContent :: Text
fileContent = "nbysizxe"

-- * Generics
keys :: Text -> [Text]
keys key = map (\x -> key <> "-" <> show x) [0 :: Int ..127]

hash :: Text -> [Int]
hash x = Day10.denseHash (Day10.sparseHash x 255)

hashs :: Text -> [[Int]]
hashs key = map hash (keys key)

toRow :: [Int] -> [Bool]
toRow = concatMap (\l -> map (\i -> testBit l (7 - i)) [0..7])

grid :: Text -> [[Bool]]
grid key = map toRow (hashs key)

-- * FIRST problem
day :: Text -> Int
day key = countIf (==True) (mconcat (map toRow (hashs key)))

-- * SECOND problem
gridMap :: [[Bool]] -> Set (Int, Int)
gridMap g= Set.fromList $ do
  (l, line) <- zip [0..] g
  (c, col) <- zip [0..] line

  guard col

  pure ((l, c))

{- I really love union find -}
day' :: Text -> Int
day' key = runST $ do
  let set = gridMap (grid key)
      items = Set.toList set

  points <- mapM fresh items

  let itemsToPoints = Map.fromList (zip items points)

      merge item@(l, c) = do
        let p = itemsToPoints Map.! item
            neight = do
              (dl, dc) <- [(-1, 0), (1, 0), (0, -1), (0, 1)]

              let l' = l + dl
                  c' = c + dc
              guard (Set.member (l', c') set)
              pure (l', c')

        mapM_ (\p' -> union p (itemsToPoints Map.! p')) neight

  mapM_ merge items

  descs <- mapM descriptor points

  pure (length (ordNub descs))

-- * Tests
testKey :: Text
testKey = "flqrgnkx"

test :: IO ()
test = hspec $ do
  describe "simple examples" $ do
    it "of first star" $ do
      day testKey `shouldBe` 8108
    it "of second star" $ do
      day' testKey `shouldBe` 1242
  describe "works" $ do
    it "on first star" $ do
      day fileContent `shouldBe` 8216
    it "on second star" $ do
      day' fileContent `shouldBe` 1139
